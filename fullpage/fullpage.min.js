/*!
 * SimplePage 1.0.0
 * A simplified full-page scrolling library inspired by fullPage.js
 * @license MIT
 * Copyright (C) 2025 Your Name
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.fullpage = factory());
})(this, (function () { 'use strict';

    // Utility Functions
    const $ = (selector, context = document) => context.querySelectorAll(selector);
    const addClass = (el, cls) => el.classList.add(cls);
    const removeClass = (el, cls) => el.classList.remove(cls);
    const css = (el, styles) => Object.assign(el.style, styles);
    const getWindowHeight = () => window.innerHeight;

    // State
    const state = {
        sections: [],
        activeSection: null,
        isScrolling: false,
        canScroll: true,
    };

    // Default Options
    const defaults = {
        sectionSelector: '.section',
        slideSelector: '.slide',
        autoScrolling: true,
        scrollingSpeed: 700,
        navigation: false,
        navigationPosition: 'right',
        anchors: [],
        afterLoad: null,
        onLeave: null,
        afterSlideLoad: null,
        onSlideLeave: null,
    };
    let options = {};

    // Classes
    const WRAPPER = 'fp-wrapper';
    const SECTION = 'fp-section';
    const SLIDE = 'fp-slide';
    const SLIDES_WRAPPER = 'fp-slides';
    const SLIDES_CONTAINER = 'fp-slidesContainer';
    const NAV = 'fp-nav';
    const ACTIVE = 'active';

    // Section and Slide Classes
    class Section {
        constructor(el) {
            this.el = el;
            this.anchor = el.getAttribute('data-anchor') || '';
            this.slides = Array.from($(options.slideSelector, el)).map(slide => new Slide(slide, this));
            this.activeSlide = this.slides.find(s => s.el.classList.contains(ACTIVE)) || this.slides[0];
            this.index = Array.from($(options.sectionSelector)).indexOf(el);
        }
        next() { return state.sections[this.index + 1] || null; }
        prev() { return state.sections[this.index - 1] || null; }
    }

    class Slide {
        constructor(el, section) {
            this.el = el;
            this.section = section;
            this.anchor = el.getAttribute('data-anchor') || '';
            this.index = Array.from($(options.slideSelector, section.el)).indexOf(el);
        }
    }

    // Scrolling Logic
    function scrollToSection(section) {
        if (state.isScrolling || section === state.activeSection) return;

        const prevSection = state.activeSection;
        state.isScrolling = true;
        state.canScroll = false;

        if (prevSection && options.onLeave) {
            options.onLeave(prevSection.index + 1, section.index + 1, section.index > prevSection.index ? 'down' : 'up');
        }

        addClass(section.el, ACTIVE);
        if (prevSection) removeClass(prevSection.el, ACTIVE);
        state.activeSection = section;

        const top = section.el.offsetTop;
        if (options.autoScrolling) {
            css(document.querySelector(`.${WRAPPER}`), {
                transform: `translate3d(0, -${top}px, 0)`,
                transition: `transform ${options.scrollingSpeed}ms ease`,
            });
        } else {
            window.scrollTo({ top, behavior: 'smooth' });
        }

        setTimeout(() => {
            state.isScrolling = false;
            state.canScroll = true;
            if (options.afterLoad) options.afterLoad(section.anchor, section.index + 1);
            updateNav();
        }, options.scrollingSpeed);
    }

    function scrollToSlide(slidesWrapper, slide) {
        const section = state.sections.find(s => s.el.contains(slidesWrapper));
        const prevSlide = section.activeSlide;

        if (options.onSlideLeave && prevSlide) {
            options.onSlideLeave(section.anchor, section.index + 1, prevSlide.index + 1, slide.index > prevSlide.index ? 'right' : 'left');
        }

        state.isScrolling = true;
        addClass(slide.el, ACTIVE);
        if (prevSlide) removeClass(prevSlide.el, ACTIVE);
        section.activeSlide = slide;

        const left = slide.el.offsetLeft;
        css(slidesWrapper.querySelector(`.${SLIDES_CONTAINER}`), {
            transform: `translate3d(-${left}px, 0, 0)`,
            transition: `transform ${options.scrollingSpeed}ms ease`,
        });

        setTimeout(() => {
            state.isScrolling = false;
            if (options.afterSlideLoad) options.afterSlideLoad(section.anchor, section.index + 1, slide.anchor, slide.index + 1);
        }, options.scrollingSpeed);
    }

    // Navigation
    function addNav() {
        const nav = document.createElement('div');
        nav.id = NAV;
        nav.className = `${NAV} fp-${options.navigationPosition}`;
        const ul = document.createElement('ul');
        state.sections.forEach((section, i) => {
            const li = document.createElement('li');
            const a = document.createElement('a');
            a.href = `#${section.anchor || i}`;
            a.innerHTML = '<span></span>';
            a.onclick = e => { e.preventDefault(); scrollToSection(section); };
            li.appendChild(a);
            ul.appendChild(li);
        });
        nav.appendChild(ul);
        document.body.appendChild(nav);
        updateNav();
    }

    function updateNav() {
        if (!options.navigation) return;
        const links = $(`#${NAV} a`);
        links.forEach(a => removeClass(a, ACTIVE));
        addClass(links[state.activeSection.index], ACTIVE);
    }

    // Event Handlers
    function addWheelHandler() {
        document.addEventListener('wheel', e => {
            if (!state.canScroll || !options.autoScrolling) return;
            scrollToSection(e.deltaY > 0 ? state.activeSection.next() : state.activeSection.prev());
            e.preventDefault();
        }, { passive: false });
    }

    function addTouchHandler(wrapper) {
        let startY = 0;
        wrapper.addEventListener('touchstart', e => startY = e.touches[0].pageY);
        wrapper.addEventListener('touchmove', e => {
            if (!state.canScroll) return;
            const delta = startY - e.touches[0].pageY;
            if (Math.abs(delta) > 50) {
                scrollToSection(delta > 0 ? state.activeSection.next() : state.activeSection.prev());
            }
            e.preventDefault();
        }, { passive: false });
    }

    // Public API
    const api = {
        moveSectionUp() { scrollToSection(state.activeSection.prev()); },
        moveSectionDown() { scrollToSection(state.activeSection.next()); },
        moveTo(target) {
            const section = state.sections.find(s => s.anchor === target || s.index + 1 === target);
            if (section) scrollToSection(section);
        },
        setAutoScrolling(value) {
            options.autoScrolling = value;
            css(document.querySelector('html, body'), value ? { overflow: 'hidden', height: '100%' } : { overflow: 'auto', height: 'auto' });
        },
    };

    // Initialization
    function fullpage(containerSelector, opts) {
        options = Object.assign({}, defaults, opts);
        const container = $(containerSelector)[0];
        addClass(container, WRAPPER);

        state.sections = Array.from($(options.sectionSelector, container)).map(el => new Section(el));
        state.activeSection = state.sections.find(s => s.el.classList.contains(ACTIVE)) || state.sections[0];
        addClass(state.activeSection.el, ACTIVE);

        state.sections.forEach(section => {
            css(section.el, { height: `${getWindowHeight()}px` });
            if (section.slides.length) {
                const wrapper = document.createElement('div');
                addClass(wrapper, SLIDES_WRAPPER);
                const container = document.createElement('div');
                addClass(container, SLIDES_CONTAINER);
                section.slides.forEach(slide => css(slide.el, { display: 'inline-block', width: '100%' }));
                container.append(...section.slides.map(s => s.el));
                wrapper.append(container);
                section.el.append(wrapper);
                if (section.activeSlide) {
                    css(container, { transform: `translate3d(-${section.activeSlide.el.offsetLeft}px, 0, 0)` });
                }
            }
        });

        if (options.navigation) addNav();
        if (options.autoScrolling) {
            addWheelHandler();
            addTouchHandler(container);
        }
        api.setAutoScrolling(options.autoScrolling);

        return api;
    }

    return fullpage;
}));
